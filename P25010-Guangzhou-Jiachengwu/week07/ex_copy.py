# 以下代码输出什么，请解释原因(写到问题下方):
li = [ [ ] ] * 5
li[0].append(10)
print(li)
li[1].append(20)
print(li)
li.append(30)
print(li)


'''
因为[[]]是一种复杂结构，一开始[[]]相当于引用了5次一样的内存地址，所以他们id值都一样的
当向这个列表里面的第0个元素追加内容时，相当于对[[]]内存地址上面的值进行了修改，所以5个都改了
同理，当对这个列表第1个元素追加里面时，也会修改到5个元素里面的值，毕竟是引用的统一个地址
最后真正向li列表进行追加时，就相当于修改了li的值，所以就多了个30的元素了
'''

"""
概念理解的比较到位，这一种是两层的的数据结构，还可以尝试一下，如果是三层数据结构，是否是同样的情况。
自己在编译器上尝试着复制一下，这样对于python里的浅复制和深度复制的概念能够更加了解。
"""
